{"version":3,"sources":["js/booking.js"],"names":["bookingPopUp","bookingContainer","document","querySelector","bookingStageBackButtonCollection","querySelectorAll","forEach","elementToFix","style","position","classList","add","handleRenderedBookingStage","remove","closeBookingPopUp","indexPassed","bookingStageContainer","progressElement","progress","index","value","console","log","eachBookingStage","progressField","renderEstimate","getEstimate","carDetailsUUID","returnValue","formValuesCollection","map","eachFormValue","data","UUID","eachDataField","eachDataFieldValue","name","mobileTel","dateBooked","userAddress","carMake","carModel","carYear","confirmationSectionTabPage","userDetailsAndDateBooked","estimateParsed","innerHTML","handleFormSubmit","event","elements","removeButtonFromFormData","formJsonData","filter","eachElement","type","formID","target","id","formIDExist","eachFormCorrespondingValue","handleFormPrevious","formToDisplayCorrespondingIndex","formToDisplayElements","correspondingFormDataFilteredIndex","eachData","bookServiceButtonQuery","bookServiceButton","addEventListener","closeBookId","getElementById","eachBackButton","bookingFormCollection","eachBookingForm","preventDefault"],"mappings":"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","file":"booking.d51e4cdc.js","sourceRoot":"..","sourcesContent":["const bookingPopUp = () => {\n    let bookingContainer = document.querySelector(\".booking\");\n    let bookingStageBackButtonCollection = document.querySelector(\n        \".each-stage__button--back\"\n    );\n    const elementToFixPositionOnPopUp = document.querySelectorAll(\n        \".fix-on-booking-pop-up\"\n    );\n    elementToFixPositionOnPopUp.forEach(elementToFix => {\n        elementToFix.style.position = \"fixed\";\n    });\n    bookingStageBackButtonCollection.classList.add(\"display-none\");\n    handleRenderedBookingStage(0);\n    bookingContainer.classList.remove(\"display-none\");\n\n    bookingContainer.classList.add(\"display-flex\");\n};\n\nconst closeBookingPopUp = () => {\n    let bookingContainer = document.querySelector(\".booking\");\n    bookingContainer.classList.remove(\"display-flex\");\n\n    bookingContainer.classList.add(\"display-none\");\n    const elementToFixPositionOnPopUp = document.querySelectorAll(\n        \".fix-on-booking-pop-up\"\n    );\n    elementToFixPositionOnPopUp.forEach(elementToFix => {\n        elementToFix.style.position = \"static\";\n    });\n};\n\n/**\n *\n * @param indexPassed this denotes the index of the booking stage that needs to be displayed\n * @function handleRenderedBookingStage : handles the booking Stage to be displayed based on the index parameter passed\n *\n */\nconst handleRenderedBookingStage = indexPassed => {\n    const bookingStageContainer = document.querySelectorAll(\n        \".booking__form-each-stage\"\n    );\n    const progressElement = document.querySelector(\".progress__element\");\n    const progress = [\n        { index: 0, value: 0 },\n        { index: 1, value: 0.25 },\n        { index: 2, value: 0.5 },\n        { index: 3, value: 0.75 },\n        { index: 4, value: 1.0 }\n    ];\n    console.log(\n        \"index seen in handle rendered booking stage is : \",\n        indexPassed\n    );\n    bookingStageContainer.forEach((eachBookingStage, index) => {\n        eachBookingStage.classList.remove(\"display-none\");\n\n        if (index !== indexPassed) {\n            return eachBookingStage.classList.add(\"display-none\");\n        } else {\n            progress.forEach(progressField => {\n                if (progressField.index == indexPassed) {\n                    progressElement.value = progressField.value;\n                }\n            });\n            return eachBookingStage.classList.remove(\"display-none\");\n        }\n    });\n    const indexForConfirmationTabPage = 3;\n    if (indexPassed === indexForConfirmationTabPage) {\n        renderEstimate();\n    }\n};\n\nconst getEstimate = () => {\n    let carDetailsUUID = \"form_select_task\";\n    let usersDetailsUUID = \"form_contact_details\";\n    let addressUUID = \"form_address_id\";\n    let returnValue = {};\n    formValuesCollection.map(eachFormValue => {\n        const data = eachFormValue.data;\n        if (eachFormValue.UUID === usersDetailsUUID) {\n            return data.map(eachDataField => {\n                const eachDataFieldValue = eachDataField.value;\n                switch (eachDataField.name) {\n                    case \"name\":\n                        returnValue = {\n                            ...returnValue,\n                            name: eachDataFieldValue\n                        };\n                        console.log(\"name seen : \", returnValue);\n\n                        break;\n\n                    case \"tel\":\n                        returnValue = {\n                            ...returnValue,\n                            mobileTel: eachDataFieldValue\n                        };\n                        console.log(\"tel seen : \", returnValue);\n\n                        break;\n                    case \"date\":\n                        returnValue = {\n                            ...returnValue,\n                            dateBooked: eachDataFieldValue\n                        };\n                        console.log(\"date seen : \", returnValue);\n\n                        break;\n                }\n            });\n        } else if (eachFormValue.UUID == addressUUID) {\n            data.map(eachDataField => {\n                const eachDataFieldValue = eachDataField.value;\n                switch (eachDataField.name) {\n                    case \"user_address\":\n                        returnValue = {\n                            ...returnValue,\n                            userAddress: eachDataFieldValue\n                        };\n                        console.log(\"user address : \", returnValue);\n\n                        break;\n                }\n            });\n        } else if (eachFormValue.UUID == carDetailsUUID) {\n            console.log(\"car details value is : \", data);\n            data.map(eachDataField => {\n                const eachDataFieldValue = eachDataField.value;\n                switch (eachDataField.name) {\n                    case \"car_make\":\n                        returnValue = {\n                            ...returnValue,\n                            carMake: eachDataFieldValue\n                        };\n                        console.log(\"car  make seen : \", returnValue);\n                        break;\n                    case \"car_model\":\n                        returnValue = {\n                            ...returnValue,\n                            carModel: eachDataFieldValue\n                        };\n                        console.log(\"car model   : \", returnValue);\n\n                        break;\n\n                    case \"car_year\":\n                        returnValue = {\n                            ...returnValue,\n                            carYear: eachDataFieldValue\n                        };\n                        console.log(\"car year : \", returnValue);\n\n                        break;\n                }\n            });\n        }\n    });\n    console.log(\"return value is : \", returnValue);\n    return returnValue;\n};\n\nconst renderEstimate = () => {\n    const confirmationSectionTabPage = document.querySelector(\n        \".confirmation__container\"\n    );\n    let userDetailsAndDateBooked = getEstimate();\n    console.log(\"user details is : \", userDetailsAndDateBooked);\n    const estimateParsed = `\n        <h2>Booking Summary</h2>\n        <div class=\"confirmation__section\">\n            <p>Name : ${userDetailsAndDateBooked.name}</p>\n            <p>Mobile : ${userDetailsAndDateBooked.mobileTel}</p>\n            <p>Date Booked : ${userDetailsAndDateBooked.dateBooked}</p>\n        </div>\n        <div class=\"confrimation-section\">\n            <p>Car Scan</p>\n            <p> ${userDetailsAndDateBooked.carMake}</p>\n            <p> ${userDetailsAndDateBooked.carModel}</p>\n            <p> ${userDetailsAndDateBooked.carYear}</p>\n        </div>\n        <div class=\"confirmation-section\">\n            <p>Where you require the service?</p>\n            <p> ${userDetailsAndDateBooked.userAddress}</p>\n            <p>\n                Note: Your correct locality helps our\n                professionals reach you on time.\n            </p>\n        </div>\n        <div class=\"confirmation-section\">\n            <a href=\"tel:+2348188354753\"></a>\n        </div>\n        <div class=\"each__stage__action-button\">\n            <button type=\"button\" class=\"each-stage__button each-stage__button--back\">Back</button>\n            <button class=\"each-stage__button\" type=\"button\">\n                Get Estimate\n            </button>\n        </div>\n    `;\n    confirmationSectionTabPage.innerHTML = estimateParsed;\n};\n\nlet formValuesCollection = [];\n\n/**\n *\n * @param {*} event\n * @param {*} elements\n * @param {*} index\n */\nconst handleFormSubmit = (event, elements, index) => {\n    console.log(\"elements on submit is  : \", elements);\n\n    let removeButtonFromFormData = [...elements].filter(eachElement => {\n        return eachElement.type != \"submit\";\n    });\n\n    let formJsonData = removeButtonFromFormData.map(eachElement => {\n        return { name: eachElement.name, value: eachElement.value };\n    });\n    let formID = event.target.id;\n    let formIDExist = false;\n    formValuesCollection.forEach(eachFormCorrespondingValue => {\n        if (eachFormCorrespondingValue.UUID === formID) {\n            formIDExist = true;\n        }\n    });\n    if (formIDExist) {\n        formValuesCollection[index] = {\n            UUID: formID,\n            data: [...formJsonData],\n            index: index\n        };\n    } else {\n        formValuesCollection = [\n            ...formValuesCollection,\n            {\n                UUID: formID,\n                data: [...formJsonData],\n                index: index\n            }\n        ];\n    }\n    console.log(\"final form value collection is : \", formValuesCollection);\n    handleRenderedBookingStage(index + 1);\n};\n\nconst handleFormPrevious = (event, index) => {\n    let formToDisplayCorrespondingIndex = index - 1;\n    let formToDisplayAfterStageRendered = document.querySelectorAll(\n        \".booking__form_each-form\"\n    )[formToDisplayCorrespondingIndex];\n    let formToDisplayElements = formToDisplayAfterStageRendered.elements;\n    let correspondingFormData =\n        formValuesCollection[formToDisplayCorrespondingIndex];\n    let correspondingFormDataFilteredIndex = correspondingFormData.data;\n    [...formToDisplayElements].map(eachElement => {\n        correspondingFormDataFilteredIndex.forEach(eachData => {\n            if (eachElement.name === eachData.name) {\n                eachElement.value = eachData.value;\n            }\n        });\n    });\n    console.log(\"index reversed is : \", formToDisplayCorrespondingIndex);\n\n    handleRenderedBookingStage(formToDisplayCorrespondingIndex);\n};\n\nlet bookServiceButtonQuery = document.querySelectorAll('.book_service');\nbookServiceButtonQuery.forEach((bookServiceButton) => {\n    bookServiceButton.addEventListener(\"click\", () => {\n        bookingPopUp();\n    });\n})\n\n\nlet closeBookId = document.getElementById(\"close_bookPopUp\");\ncloseBookId.addEventListener(\"click\", () => {\n    closeBookingPopUp();\n});\n\nlet bookingStageBackButtonCollection = document.querySelectorAll(\n    \".each-stage__button--back\"\n);\nbookingStageBackButtonCollection.forEach((eachBackButton, index) => {\n    eachBackButton.addEventListener(\"click\", event => {\n        handleFormPrevious(event, index);\n    });\n});\n\nlet bookingFormCollection = document.querySelectorAll(\n    \".booking__form_each-form\"\n);\nbookingFormCollection.forEach((eachBookingForm, index) => {\n    eachBookingForm.addEventListener(\"submit\", event => {\n        event.preventDefault();\n        handleFormSubmit(event, eachBookingForm.elements, index);\n    });\n});"]}